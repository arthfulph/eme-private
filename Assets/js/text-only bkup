let localStream;
let username;
let remoteUser;
const url = new URL(window.location.href);

let peerConnection;
let remoteStream;
let sendChannel;
let receiveChannel;
const msgInput = document.querySelector("#msg-input");
const msgSendBtn = document.querySelector(".msg-send-button");
const chatTextArea = document.querySelector(".chat-text-area");
const omeID = localStorage.getItem("omeID");
const socket = io.connect();

socket.on("connect", () => {
  console.log("The Socket is connected");
});

socket.on("mySocketId", (socketId) => {
  if (socket.connected) {
    username = socketId;
    socket.emit("userconnect", {
      displayName: socketId,
    });
    runUser();
  }

  console.log("My Socket ID:", socketId);
});

function runUser() {
  try {
    socket.emit("findUnengagedUser", {
      username: username,
    });

    socket.on("startChat", (otherUserId) => {
      console.log("Starting chat with user:", otherUserId);

      showLoadingOverlay();

      remoteUser = otherUserId;
      createOffer(otherUserId);

      document.querySelector(".chat-text-container p:first-child").style.display = "block";
    });
  } catch (error) {
    console.error("Error:", error.message);
  }
}

function createPeerConnection() {
  const servers = {
    iceServers: [
      {
        urls: [
          "stun:stun1.1.google.com:19302",
          "stun:stun2.1.google.com:19302",
        ],
      },
    ],
  };
  peerConnection = new RTCPeerConnection(servers);
  remoteStream = new MediaStream();
  document.getElementById("user-2").srcObject = remoteStream;

  peerConnection.ontrack = (event) => {
    event.streams[0].getTracks().forEach((track) => {
      remoteStream.addTrack(track);
    });
  };

  peerConnection.onicecandidate = (event) => {
    if (event.candidate) {
      socket.emit("candidateSentToUser", {
        username: username,
        remoteUser: remoteUser,
        iceCandidateData: event.candidate,
      });
    }
  };

  sendChannel = peerConnection.createDataChannel("sendDataChannel");
  sendChannel.onopen = () => {
    console.log("Data channel is now open and ready to use");
    onSendChannelStateChange();
    hideLoadingOverlay();
  };

  peerConnection.ondatachannel = receiveChannelCallback;
}

function sendData() {
  const msgData = msgInput.value;
  chatTextArea.innerHTML += `<div style='margin-top:2px; margin-bottom:2px;'><b>Me: </b>${msgData}</div>`;
  onSendChannelStateChange();
  sendChannel.send(msgData);
  msgInput.value = "";
}

function receiveChannelCallback(event) {
  console.log("Receive Channel Callback");
  receiveChannel = event.channel;
  receiveChannel.onmessage = onReceiveChannelMessageCallback;
  receiveChannel.onopen = onReceiveChannelStateChange;
  receiveChannel.onclose = onReceiveChannelStateChange;
}

function onReceiveChannelMessageCallback(event) {
  console.log("Received Message");
  chatTextArea.innerHTML += `<div style='margin-top:2px; margin-bottom:2px;'><b>Stranger: </b>${event.data}</div>`;
}

function onReceiveChannelStateChange() {
  const readystate = receiveChannel.readyState;
  console.log("Receive channel state is: " + readystate);
  if (readystate === "open") {
    console.log("Data channel ready state is open - onReceiveChannelStateChange");
  } else {
    console.log("Data channel ready state is NOT open - onReceiveChannelStateChange");
  }
}

function onSendChannelStateChange() {
  const readystate = sendChannel.readyState;
  console.log("Send channel state is: " + readystate);
  if (readystate === "open") {
    console.log("Data channel ready state is open - onSendChannelStateChange");
  } else {
    console.log("Data channel ready state is NOT open - onSendChannelStateChange");
  }
}

function fetchNextUser(remoteUser) {
  socket.emit("findNextUnengagedUser", {
    username: username,
    remoteUser: remoteUser,
  });

  socket.on("NextStartChat", (otherUserId) => {
    console.log("Starting chat with user:", otherUserId);

    showLoadingOverlay();

    remoteUser = otherUserId;
    createOffer(otherUserId);

    document.querySelector(".chat-text-container p:first-child").style.display = "block";
  });
}

function createOffer(remoteU) {
  createPeerConnection();
  peerConnection.createOffer()
    .then(offer => peerConnection.setLocalDescription(offer))
    .then(() => {
      socket.emit("offerSentToRemote", {
        username: username,
        remoteUser: remoteU,
        offer: peerConnection.localDescription,
      });
    })
    .catch(error => console.error("Error creating offer:", error));
}

function createAnswer(data) {
  remoteUser = data.username;
  createPeerConnection();
  peerConnection.setRemoteDescription(data.offer)
    .then(() => peerConnection.createAnswer())
    .then(answer => peerConnection.setLocalDescription(answer))
    .then(() => {
      socket.emit("answerSentToUser1", {
        answer: peerConnection.localDescription,
        sender: data.remoteUser,
        receiver: data.username,
      });
      document.querySelector(".next-chat").style.pointerEvents = "auto";
    })
    .catch(error => console.error("Error creating answer:", error));
}

socket.on("ReceiveOffer", (data) => {
  createAnswer(data);
});

function addAnswer(data) {
  if (!peerConnection.currentRemoteDescription) {
    peerConnection.setRemoteDescription(data.answer)
      .then(() => {
        document.querySelector(".next-chat").style.pointerEvents = "auto";
      })
      .catch(error => console.error("Error adding answer:", error));
  }
}

socket.on("ReceiveAnswer", (data) => {
  addAnswer(data);
});

socket.on("closedRemoteUser", (data) => {
  const remoteStream = peerConnection.getRemoteStreams()[0];
  remoteStream.getTracks().forEach((track) => track.stop());
  peerConnection.close();
  chatTextArea.innerHTML = "";
  const remoteVid = document.getElementById("user-2");
  if (remoteVid.srcObject) {
    remoteVid.srcObject.getTracks().forEach((track) => track.stop());
    remoteVid.srcObject = null;
  }
  console.log("Closed Remote user");
  fetchNextUser(remoteUser);
});

socket.on("candidateReceiver", (data) => {
  peerConnection.addIceCandidate(data.iceCandidateData)
    .catch(error => console.error("Error adding ice candidate:", error));
});

msgSendBtn.addEventListener("click", () => {
  sendData();
});

msgInput.addEventListener("keydown", (event) => {
  if (event.key === "Enter") {
    sendData();
    event.preventDefault();
  }
});

let lastEscPress = 0;
window.addEventListener("keydown", (event) => {
  if (event.key === "Escape") {
    const now = new Date().getTime();
    const timeSinceLastPress = now - lastEscPress;
    lastEscPress = now;
    if (timeSinceLastPress <= 300) {
      document.querySelector(".next-chat").click();
    }
  }
});

window.addEventListener("unload", () => {
  socket.emit("remoteUserClosed", {
    username: username,
    remoteUser: remoteUser,
  });
});

function closeConnection() {
  chatTextArea.innerHTML = "";
  const remoteStream = peerConnection.getRemoteStreams()[0];
  if (remoteStream) {
    remoteStream.getTracks().forEach((track) => track.stop());
  }

  peerConnection.close()
    .then(() => {
      const remoteVid = document.getElementById("user-2");
      if (remoteVid.srcObject) {
        remoteVid.srcObject.getTracks().forEach((track) => track.stop());
        remoteVid.srcObject = null;
      }
    })
    .then(() => socket.emit("remoteUserClosed", {
      username: username,
      remoteUser: remoteUser,
    }))
    .then(() => fetchNextUser(remoteUser))
    .catch(error => console.error("Error closing connection:", error));
}

document.querySelector(".next-chat").addEventListener("click", () => {
  chatTextArea.innerHTML = "";
  console.log("From Next Chat button");
  closeConnection();
});

function showLoadingOverlay() {
  document.querySelector(".loading-overlay").style.display = "flex";
}

function hideLoadingOverlay() {
  document.querySelector(".loading-overlay").style.display = "none";
}

runUser();
